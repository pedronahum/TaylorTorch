name: Ubuntu CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-24.04

    env:
      SWIFT_VERSION: swift-DEVELOPMENT-SNAPSHOT-2025-10-02-a
      SWIFT_PLATFORM: ubuntu24.04
      PYTORCH_VERSION: v2.8.0
      PYTORCH_INSTALL_DIR: /opt/pytorch

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          binutils \
          git \
          gnupg2 \
          libc6-dev \
          libcurl4-openssl-dev \
          libedit2 \
          libgcc-13-dev \
          libpython3-dev \
          libsqlite3-0 \
          libstdc++-13-dev \
          libxml2-dev \
          libz3-dev \
          pkg-config \
          python3-lldb \
          tzdata \
          unzip \
          zip \
          zlib1g-dev \
          wget \
          curl \
          ca-certificates \
          util-linux

    - name: Install PyTorch build dependencies
      run: |
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgoogle-glog-dev \
          libgtest-dev \
          libomp-18-dev \
          libleveldb-dev \
          liblmdb-dev \
          libopencv-dev \
          libopenmpi-dev \
          libsnappy-dev \
          libprotobuf-dev \
          openmpi-bin \
          openmpi-doc \
          protobuf-compiler \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-yaml \
          libgflags-dev \
          libc++-18-dev \
          libc++abi-18-dev \
          ninja-build

    - name: Install Python packages for PyTorch
      run: |
        pip3 install --break-system-packages \
          numpy \
          pyyaml \
          typing_extensions \
          sympy \
          cffi \
          cmake

    - name: Cache Swiftly toolchains
      id: cache-swiftly
      uses: actions/cache@v4
      with:
        path: ~/.swiftly
        key: swiftly-${{ runner.os }}-${{ env.SWIFT_VERSION }}

    - name: Install Swift via Swiftly
      run: |
        curl -O https://download.swift.org/swiftly/linux/swiftly-$(uname -m).tar.gz
        tar zxf swiftly-$(uname -m).tar.gz
        ./swiftly init --quiet-shell-followup
        . "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh"
        hash -r
        swiftly install ${SWIFT_VERSION} --assume-yes --use
        . "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh"
        hash -r
        rm -rf swiftly swiftly-$(uname -m).tar.gz
        SWIFT_BIN="$(command -v swift)"
        SWIFT_REAL_BIN="$(python3 -c 'import os, sys; print(os.path.realpath(sys.argv[1]))' "$SWIFT_BIN")"
        SWIFT_BIN_DIR="$(dirname "$SWIFT_REAL_BIN")"
        SWIFT_TOOLCHAIN_DIR="$(dirname "$SWIFT_BIN_DIR")"
        SWIFT_TOOLCHAIN_PATH="$(dirname "$SWIFT_TOOLCHAIN_DIR")"
        echo "$HOME/.swiftly/bin" >> $GITHUB_PATH
        echo "$SWIFT_BIN_DIR" >> $GITHUB_PATH
        echo "SWIFT_TOOLCHAIN_DIR=${SWIFT_TOOLCHAIN_DIR}" >> $GITHUB_ENV
        echo "SWIFT_TOOLCHAIN_PATH=${SWIFT_TOOLCHAIN_PATH}" >> $GITHUB_ENV
        echo "SWIFT_TOOLCHAIN=${SWIFT_TOOLCHAIN_PATH}" >> $GITHUB_ENV
        echo "SWIFTPM_SWIFT_EXEC=${SWIFT_BIN}" >> $GITHUB_ENV
        echo "PYTORCH_INSTALL_DIR=/opt/pytorch" >> $GITHUB_ENV
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        swift --version

    - name: Cache PyTorch build
      id: cache-pytorch
      uses: actions/cache@v4
      with:
        path: /opt/pytorch
        key: pytorch-${{ env.PYTORCH_VERSION }}-ubuntu-clang-${{ hashFiles('.github/workflows/ubuntu-ci.yml') }}

    - name: Clone PyTorch
      if: steps.cache-pytorch.outputs.cache-hit != 'true'
      run: |
        git clone --recursive https://github.com/pytorch/pytorch.git /tmp/pytorch
        cd /tmp/pytorch
        git checkout ${PYTORCH_VERSION}
        git submodule sync
        git submodule update --init --recursive

    - name: Verify OpenMP installation
      run: |
        echo "Checking for OpenMP headers and libraries..."

        CLANG_RESOURCE_DIR="$(clang++ -print-resource-dir)"
        echo "Clang resource dir: ${CLANG_RESOURCE_DIR}"

        RESOURCE_OMP="${CLANG_RESOURCE_DIR}/include/omp.h"
        if [ -f "${RESOURCE_OMP}" ]; then
          OMP_INCLUDE_DIR="$(dirname "${RESOURCE_OMP}")"
          echo "✓ Found omp.h at ${RESOURCE_OMP}"
        else
          for candidate in \
            "${CLANG_RESOURCE_DIR}/../include" \
            "/usr/lib/llvm-18/include" \
            "/usr/lib/llvm-17/include" \
            "/usr/include"; do
            if [ -f "${candidate}/omp.h" ]; then
              OMP_INCLUDE_DIR="${candidate}"
              echo "✓ Found omp.h at ${candidate}/omp.h"
              break
            fi
          done
        fi

        if [ -z "${OMP_INCLUDE_DIR}" ]; then
          echo "✗ omp.h not found - searching..."
          find /usr -name "omp.h" 2>/dev/null | grep -v android || echo "omp.h not found!"
          exit 1
        fi

        LLVM_BASE_DIR="$(realpath "${CLANG_RESOURCE_DIR}/../../..")"
        echo "LLVM base dir: ${LLVM_BASE_DIR}"

        for candidate in \
          "${LLVM_BASE_DIR}/lib/libomp.so" \
          "/usr/lib/llvm-18/lib/libomp.so" \
          "/usr/lib/x86_64-linux-gnu/libomp.so" \
          "/usr/lib/x86_64-linux-gnu/libomp.so.5"; do
          if [ -f "${candidate}" ]; then
            OMP_LIBRARY="${candidate}"
            echo "✓ Found libomp at ${candidate}"
            break
          fi
        done

        if [ -z "${OMP_LIBRARY}" ]; then
          echo "✗ libomp.so not found - searching..."
          find /usr -name "libomp.so*" 2>/dev/null | grep -v android || echo "libomp.so not found!"
          exit 1
        fi

        # Canonicalize the include directory path for later comparisons
        OMP_INCLUDE_DIR="$(realpath "${OMP_INCLUDE_DIR}")"
        OMP_LIBRARY="$(realpath "${OMP_LIBRARY}")"

        echo "OMP_INCLUDE_DIR=${OMP_INCLUDE_DIR}" >> $GITHUB_ENV
        echo "OMP_LIBRARY=${OMP_LIBRARY}" >> $GITHUB_ENV

    - name: Build PyTorch
      if: steps.cache-pytorch.outputs.cache-hit != 'true'
      run: |
        echo "Using OpenMP include: $OMP_INCLUDE_DIR"
        echo "Using OpenMP library: $OMP_LIBRARY"

        cd /tmp/pytorch
        mkdir -p build
        cd build
        CLANG_RESOURCE_DIR="$(clang++ -print-resource-dir)"
        LLVM_BASE_DIR="$(realpath "${CLANG_RESOURCE_DIR}/../../..")"
        echo "Clang resource dir: ${CLANG_RESOURCE_DIR}"
        echo "LLVM base dir: ${LLVM_BASE_DIR}"

        LIBCXX_INCLUDE_DIR=""
        for candidate in \
          "${LLVM_BASE_DIR}/include/c++/v1" \
          "/usr/include/c++/v1" \
          "/usr/lib/llvm-18/include/c++/v1" \
          "/usr/lib/swift/clang/include/c++/v1"; do
          if [ -f "${candidate}/cstddef" ]; then
            LIBCXX_INCLUDE_DIR="$(realpath "${candidate}")"
            break
          fi
        done

        if [ -z "${LIBCXX_INCLUDE_DIR}" ]; then
          echo "ERROR: Unable to locate libc++ headers (missing cstddef)."
          find "${LLVM_BASE_DIR}" -maxdepth 5 -path "*c++/v1/cstddef" 2>/dev/null | head -20 || true
          exit 1
        fi

        LIBCXX_LIBRARY_DIR=""
        for candidate in \
          "${LLVM_BASE_DIR}/lib" \
          "/usr/lib/llvm-18/lib" \
          "/usr/lib/swift/clang/lib" \
          "/usr/lib/x86_64-linux-gnu" \
          "/usr/lib"; do
          if ls "${candidate}/libc++.so"* >/dev/null 2>&1; then
            LIBCXX_LIBRARY_DIR="$(realpath "${candidate}")"
            break
          fi
        done

        if [ -z "${LIBCXX_LIBRARY_DIR}" ]; then
          echo "ERROR: Unable to locate libc++ libraries."
          find "${LLVM_BASE_DIR}" -name "libc++.so*" 2>/dev/null | head -20 || true
          exit 1
        fi

        echo "libc++ include dir: ${LIBCXX_INCLUDE_DIR}"
        echo "libc++ library dir: ${LIBCXX_LIBRARY_DIR}"

        export USE_LIBCXX=1
        if [ -n "$CXXFLAGS" ]; then
          export CXXFLAGS="-stdlib=libc++ -isystem ${LIBCXX_INCLUDE_DIR} $CXXFLAGS"
        else
          export CXXFLAGS="-stdlib=libc++ -isystem ${LIBCXX_INCLUDE_DIR}"
        fi
        if [ -n "$LDFLAGS" ]; then
          export LDFLAGS="-L${LIBCXX_LIBRARY_DIR} $LDFLAGS"
        else
          export LDFLAGS="-L${LIBCXX_LIBRARY_DIR}"
        fi
        if [ -n "$LIBRARY_PATH" ]; then
          export LIBRARY_PATH="${LIBCXX_LIBRARY_DIR}:${LIBRARY_PATH}"
        else
          export LIBRARY_PATH="${LIBCXX_LIBRARY_DIR}"
        fi

        OPENMP_C_FLAGS="-fopenmp=libomp"
        OPENMP_CXX_FLAGS="-fopenmp=libomp"
        RESOURCE_INCLUDE="$(realpath "${CLANG_RESOURCE_DIR}/include")"
        if [ -n "$OMP_INCLUDE_DIR" ] && [ "$OMP_INCLUDE_DIR" != "$RESOURCE_INCLUDE" ]; then
          OPENMP_C_FLAGS="$OPENMP_C_FLAGS -I${OMP_INCLUDE_DIR}"
          OPENMP_CXX_FLAGS="$OPENMP_CXX_FLAGS -I${OMP_INCLUDE_DIR}"
        fi
        CC=clang CXX=clang++ cmake .. \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_CXX_EXTENSIONS=OFF \
          -DCMAKE_CXX_FLAGS="-stdlib=libc++ -isystem ${LIBCXX_INCLUDE_DIR}" \
          -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++ -L${LIBCXX_LIBRARY_DIR}" \
          -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++ -L${LIBCXX_LIBRARY_DIR}" \
          -DCMAKE_PREFIX_PATH="${LLVM_BASE_DIR};/usr" \
          -DUSE_LIBCXX=ON \
          -DOpenMP_C_FLAGS="${OPENMP_C_FLAGS}" \
          -DOpenMP_CXX_FLAGS="${OPENMP_CXX_FLAGS}" \
          -DOpenMP_C_LIB_NAMES="libomp" \
          -DOpenMP_CXX_LIB_NAMES="libomp" \
          -DOpenMP_libomp_LIBRARY="${OMP_LIBRARY}" \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/opt/pytorch \
          -DBUILD_PYTHON=OFF \
          -DBUILD_TEST=OFF \
          -DBUILD_CAFFE2=OFF \
          -DUSE_DISTRIBUTED=OFF \
          -DUSE_MPS=OFF \
          -DUSE_CUDA=OFF \
          -DUSE_MKLDNN=OFF \
          -DUSE_XNNPACK=OFF \
          -DUSE_QNNPACK=OFF \
          -DUSE_FBGEMM=OFF \
          -DPYTHON_EXECUTABLE=$(which python3) \
          -GNinja
        cmake --build . --target install -j$(nproc)

    - name: Fix PyTorch permissions
      if: steps.cache-pytorch.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p /opt/pytorch
        sudo cp -r /tmp/pytorch/build/install/* /opt/pytorch/ || true

    - name: Set up PyTorch library paths
      run: |
        echo "LD_LIBRARY_PATH=/opt/pytorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "/opt/pytorch/lib" | sudo tee -a /etc/ld.so.conf.d/pytorch.conf
        sudo ldconfig

    - name: Build TaylorTorch
      run: |
        swift build -c release

    - name: Run tests
      run: |
        swift test -c release

    - name: Build examples
      run: |
        swift build -c release --product MNISTExample
        swift build -c release --product ANKIExample
        swift build -c release --product KARATEExample

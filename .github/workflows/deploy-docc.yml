name: Deploy DocC Documentation

on:
  workflow_run:
    workflows: ["macOS CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: macos-15  # macOS 15 required for Swift 6.x
    # Only run if macOS CI succeeded (or if manually triggered)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    env:
      SWIFT_VERSION: swift-DEVELOPMENT-SNAPSHOT-2025-10-02-a  # Same as macos-ci.yml

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better DocC generation

    - name: Install Homebrew dependencies
      run: |
        brew update
        brew install gnu-getopt

    - name: Cache Swift toolchain
      id: cache-swift
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2025-10-02-a.xctoolchain
        key: swift-toolchain-${{ runner.os }}-${{ env.SWIFT_VERSION }}

    - name: Install Swift via Swiftly
      if: steps.cache-swift.outputs.cache-hit != 'true'
      run: |
        # Add gnu-getopt to PATH (required by Swiftly)
        export PATH="$(brew --prefix gnu-getopt)/bin:$PATH"

        # Download and install Swiftly
        curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
        installer -pkg swiftly.pkg -target CurrentUserHomeDirectory

        # Initialize Swiftly
        ~/.swiftly/bin/swiftly init --quiet-shell-followup
        . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
        hash -r

        # Install the specific Swift version
        swiftly install ${SWIFT_VERSION} --assume-yes --use
        . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
        hash -r

        # Clean up installer
        rm swiftly.pkg

        echo "✅ Swift ${SWIFT_VERSION} installed successfully"
        swift --version

    - name: Set up Swift environment
      run: |
        # Set the toolchain path
        SWIFT_TOOLCHAIN_PATH="$HOME/Library/Developer/Toolchains/${SWIFT_VERSION}.xctoolchain"

        if [ ! -d "$SWIFT_TOOLCHAIN_PATH" ]; then
          echo "❌ Error: Swift toolchain not found at $SWIFT_TOOLCHAIN_PATH"
          echo "Available toolchains:"
          ls -la "$HOME/Library/Developer/Toolchains/" || echo "No toolchains directory"
          exit 1
        fi

        SWIFT_TOOLCHAIN_DIR="${SWIFT_TOOLCHAIN_PATH}/usr"
        SWIFT_BIN_DIR="${SWIFT_TOOLCHAIN_DIR}/bin"
        SWIFT_BIN="${SWIFT_BIN_DIR}/swift"

        # Add to PATH and environment
        echo "${SWIFT_BIN_DIR}" >> $GITHUB_PATH
        echo "SWIFT_TOOLCHAIN_DIR=${SWIFT_TOOLCHAIN_DIR}" >> $GITHUB_ENV
        echo "SWIFT_TOOLCHAIN_PATH=${SWIFT_TOOLCHAIN_PATH}" >> $GITHUB_ENV
        echo "SWIFTPM_SWIFT_EXEC=${SWIFT_BIN}" >> $GITHUB_ENV

        # Verify Swift version
        echo "✅ Swift environment configured:"
        "${SWIFT_BIN}" --version

    - name: Cache Swift dependencies
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install swift-docc-plugin (if needed)
      run: |
        # Check if swift-docc-plugin is available
        if ! swift package plugin --list 2>/dev/null | grep -q docc; then
          echo "swift-docc-plugin not found in dependencies"
          echo "Documentation will be built using available Swift toolchain"
        else
          echo "swift-docc-plugin found"
        fi

    - name: Resolve dependencies
      run: swift package resolve

    - name: Build documentation
      run: |
        # Create docs output directory
        mkdir -p docs

        # Generate static DocC documentation
        # Using --allow-writing-to-directory to permit output
        swift package \
          --allow-writing-to-directory ./docs \
          generate-documentation \
          --target Torch \
          --output-path ./docs \
          --transform-for-static-hosting \
          --hosting-base-path TaylorTorch

        echo "✅ Documentation generated successfully"

        # Verify docs were created
        if [ ! -f "docs/index.html" ]; then
          echo "❌ Error: index.html not found in docs/"
          echo "Generated files:"
          ls -la docs/
          exit 1
        fi

        echo "📚 Documentation structure:"
        ls -lh docs/
      continue-on-error: false

    - name: Add custom index redirect (optional)
      run: |
        # Create a root index.html that redirects to the documentation
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="0; url=documentation/torch/">
            <title>TaylorTorch Documentation</title>
        </head>
        <body>
            <p>Redirecting to <a href="documentation/torch/">TaylorTorch Documentation</a>...</p>
        </body>
        </html>
        EOF
        echo "✅ Custom index.html created"

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Output documentation URL
      run: |
        echo "📖 Documentation deployed successfully!"
        echo "🔗 URL: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "Direct links:"
        echo "  - Home: ${{ steps.deployment.outputs.page_url }}documentation/torch/"
        echo "  - Tutorials: ${{ steps.deployment.outputs.page_url }}documentation/torch/tutorials"
